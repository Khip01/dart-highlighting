<span class="hljs-keyword">class</span> MyComponent <span class="hljs-keyword">extends</span> Component&lt;Props&gt; {
    render() {
        <span class="hljs-keyword">let</span> a : <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;&gt; = [[1,2]];
        <span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">string</span>,<span class="hljs-built_in">number</span>&gt;();
        <span class="hljs-keyword">return</span> (
            &lt;div /&gt;
        );
    }
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> getModuleInstanceState(node: Node): ModuleInstanceState {
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.kind === SyntaxKind.ModuleDeclaration) {
        <span class="hljs-keyword">return</span> getModuleInstanceState((&lt;<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;&gt;node).body);
        <span class="hljs-keyword">return</span> getModuleInstanceState((&lt;ModuleDeclaration&gt;node).body);
    }
    <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> ModuleInstanceState.Instantiated;
    }
}
