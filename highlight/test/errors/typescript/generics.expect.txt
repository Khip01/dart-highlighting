<span class="hljs-keyword">var</span> noop = <span class="hljs-keyword">function</span>() {};

<span class="hljs-keyword">var</span> identity = <span class="hljs-keyword">function</span>(foo) {
  <span class="hljs-keyword">return</span> foo;
};

<span class="hljs-keyword">function</span> println(value: <span class="hljs-built_in">string</span>);

<span class="hljs-keyword">function</span> getArray(): <span class="hljs-built_in">number</span>[] {
  <span class="hljs-keyword">return</span> [1, 2];
}

<span class="hljs-keyword">type</span> Foo = {
    functionInFoo(): <span class="hljs-built_in">void</span>;
};

<span class="hljs-keyword">const</span> good = () =&gt; 0;
<span class="hljs-keyword">const</span> good = (x) =&gt; 0;
<span class="hljs-keyword">const</span> bad = (a =&gt; [...a, b]);
<span class="hljs-keyword">const</span> bad = (_ =&gt; doSomething());
<span class="hljs-keyword">const</span> bad = (() =&gt; 0);
<span class="hljs-keyword">const</span> bad = ((a, b) =&gt; [...a, b]);
<span class="hljs-keyword">const</span> array = [1, 2, 3].reduce&lt;<span class="hljs-built_in">number</span>[]&gt;((acc, next) =&gt; [...acc, next], []);
<span class="hljs-keyword">const</span> bad = ((a=2, b=5) =&gt; [...a, b]);
sides.every((length,width=(3+2+(4/5))) =&gt; length &gt; 0 );

